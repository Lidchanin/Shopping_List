package com.lidchanin.shoppinglist.database;

import org.greenrobot.greendao.annotation.*;

import com.lidchanin.shoppinglist.database.dao.DaoSession;
import org.greenrobot.greendao.DaoException;

import com.lidchanin.shoppinglist.database.dao.ProductDao;
import com.lidchanin.shoppinglist.database.dao.UsedProductDao;

// THIS CODE IS GENERATED BY greenDAO, EDIT ONLY INSIDE THE "KEEP"-SECTIONS

// KEEP INCLUDES - put your custom includes here
// KEEP INCLUDES END

/**
 * Entity mapped to table "USED_PRODUCT".
 */
@Entity(active = true)
public class UsedProduct {

    /* id */
    @Id
    private Long id;
    /* used product quantity */
    private double quantity;
    /* true -> kg, false -> pieces */
    private boolean unit;
    /* true -> purchased, false -> not */
    private boolean isPurchased;

    /* date when the product in the shopping list was marked as purchased */
    @Unique
    private long date;
    private Long productId;
    private long shoppingListId;

    /** Used to resolve relations */
    @Generated
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    @Generated
    private transient UsedProductDao myDao;

    @ToOne(joinProperty = "productId")
    private Product product;

    @Generated
    private transient Long product__resolvedKey;

    // KEEP FIELDS - put your custom fields here
    // KEEP FIELDS END

    @Generated
    public UsedProduct() {
    }

    public UsedProduct(Long id) {
        this.id = id;
    }

    @Generated
    public UsedProduct(Long id, double quantity, boolean unit, boolean isPurchased, long date, Long productId, long shoppingListId) {
        this.id = id;
        this.quantity = quantity;
        this.unit = unit;
        this.isPurchased = isPurchased;
        this.date = date;
        this.productId = productId;
        this.shoppingListId = shoppingListId;
    }

    /** called by internal mechanisms, do not call yourself. */
    @Generated
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getUsedProductDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public double getQuantity() {
        return quantity;
    }

    public void setQuantity(double quantity) {
        this.quantity = quantity;
    }

    public boolean getUnit() {
        return unit;
    }

    public void setUnit(boolean unit) {
        this.unit = unit;
    }

    public boolean getIsPurchased() {
        return isPurchased;
    }

    public void setIsPurchased(boolean isPurchased) {
        this.isPurchased = isPurchased;
    }

    public long getDate() {
        return date;
    }

    public void setDate(long date) {
        this.date = date;
    }

    public Long getProductId() {
        return productId;
    }

    public void setProductId(Long productId) {
        this.productId = productId;
    }

    public long getShoppingListId() {
        return shoppingListId;
    }

    public void setShoppingListId(long shoppingListId) {
        this.shoppingListId = shoppingListId;
    }

    /** To-one relationship, resolved on first access. */
    @Generated
    public Product getProduct() {
        Long __key = this.productId;
        if (product__resolvedKey == null || !product__resolvedKey.equals(__key)) {
            __throwIfDetached();
            ProductDao targetDao = daoSession.getProductDao();
            Product productNew = targetDao.load(__key);
            synchronized (this) {
                product = productNew;
            	product__resolvedKey = __key;
            }
        }
        return product;
    }

    @Generated
    public void setProduct(Product product) {
        synchronized (this) {
            this.product = product;
            productId = product == null ? null : product.getId();
            product__resolvedKey = productId;
        }
    }

    /**
    * Convenient call for {@link org.greenrobot.greendao.AbstractDao#delete(Object)}.
    * Entity must attached to an entity context.
    */
    @Generated
    public void delete() {
        __throwIfDetached();
        myDao.delete(this);
    }

    /**
    * Convenient call for {@link org.greenrobot.greendao.AbstractDao#update(Object)}.
    * Entity must attached to an entity context.
    */
    @Generated
    public void update() {
        __throwIfDetached();
        myDao.update(this);
    }

    /**
    * Convenient call for {@link org.greenrobot.greendao.AbstractDao#refresh(Object)}.
    * Entity must attached to an entity context.
    */
    @Generated
    public void refresh() {
        __throwIfDetached();
        myDao.refresh(this);
    }

    @Generated
    private void __throwIfDetached() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }
    }

    // KEEP METHODS - put your custom methods here
    // KEEP METHODS END

}
